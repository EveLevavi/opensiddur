<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet
  version="2.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:func="http://jewishliturgy.org/ns/functions/xslt"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:xd="http://www.pnp-software.com/XSLTdoc"
  xmlns:x="http://jewishliturgy.org/ns/temp"
  xmlns:p="http://jewishliturgy.org/ns/parser"
  xmlns:r="http://jewishliturgy.org/ns/parser-result"  
  exclude-result-prefixes="xs xd"
  >  
  <xsl:namespace-alias stylesheet-prefix="x"
    result-prefix="xsl"/>
  <xsl:output method="xml" indent="yes" encoding="utf-8"/>
    
  <xd:doc type="stylesheet">
    <xd:short>Implements a grammar parser in XSLT 2.0.</xd:short>
    <xd:copyright>Copyright 2009 Efraim Feinstein (LGPL 3+)</xd:copyright>
    <xd:detail>
        <p>A "DTD" for grammars is as follows:</p>
        <p><![CDATA[
        <!DOCTYPE p:grammar [
        <!ELEMENT p:grammar (p:term+)>
        <!ELEMENT p:term (p:termRef|p:zeroOrOne|p:zeroOrMore|p:oneOrMore|p:termRefAnon|p:exp|p:expAnon|p:choice|p:end)+>
        <!ATTLIST p:term name ID #REQUIRED>
        <!ELEMENT p:termRef EMPTY>
        <!ATTLIST p:termRef name IDREF #REQUIRED>
        <!ATTLIST p:termRef alias #CDATA #IMPLIED>
        <!ELEMENT p:termRefAnon EMPTY>
        <!ATTLIST p:termRefAnon name IDREF #REQUIRED>
        <!ELEMENT p:exp #PCDATA>
        <!ATTLIST p:exp name ID #IMPLIED>
        <!ELEMENT p:expAnon #PCDATA>
        <!ELEMENT p:choice (p:termRef|p:zeroOrOne|p:zeroOrMore|p:oneOrMore|p:termRefAnon|p:exp|p:expAnon|p:choice|p:end|p:empty|p:group)+>
        <!ELEMENT p:group (p:termRef|p:zeroOrOne|p:zeroOrMore|p:oneOrMore|p:termRefAnon|p:exp|p:expAnon|p:choice|p:end)+>
        <!ELEMENT p:end EMPTY>
        <!ELEMENT p:empty EMPTY>
        ]>
        ]]></p>
        <p>How it works: 
        p:grammar elements generate an XSLT stylesheet.
        p:term elements generate one function each, named by the name of
        the term.
        p:exp, p:expAnon, p:termRef, p:termRefAnon, p:end are the basic
        tests.  The templates for these generate tests for the given terms
        or regular expressions, by calling the appropriate function. 
        All functions return either:
        (r:{term-name}, r:remainder) if a match is found to the term.
        (r:no-match, r:remainder) if no match is found.
        r:{term name} contains 
        Terms may be referenced in grammars by name or anonymously.
        Anonymous references (p:termRefAnon, p:expAnon) create r:anonymous 
        instead of r:{term-name}, which can be cleaned from the result 
        by r:clean().
        
        </p>
        <p>This program is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.</p>

        <p>This program is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.</p>

        <p>You should have received a copy of the GNU Lesser General Public License
        along with this program.  If not, see 
        <a href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>.
        </p>
      </xd:detail>
      <xd:svnId>$Id: grammar.xsl2 501 2010-05-02 21:25:30Z efraim.feinstein $</xd:svnId>
  </xd:doc>

  <xd:doc>
    <xd:short>Root element: make a new stylesheet</xd:short>
  </xd:doc>
  <xsl:template match="p:grammar">
    <x:stylesheet version="2.0"
      >
      <xsl:namespace name="xs" select="'http://www.w3.org/2001/XMLSchema'"/>
      
      <x:output method="xml" encoding="utf-8" />
      
      
      <x:variable name="no-match-result" as="element(r:no-match)">
        <r:no-match/>
      </x:variable>
      
      <x:function name="r:clean" as="element()+">
        <x:param name="to-clean" as="element()+"/>
        
        <x:apply-templates select="$to-clean" mode="clean"/>
      </x:function>
      
      <x:template match="r:empty|r:end" mode="clean"/>
      
      <x:template match="r:anonymous" mode="clean">
        <x:apply-templates mode="#current"/>
      </x:template>
      
      <x:template match="text()|comment()|element()|/r:anonymous" 
        mode="clean">
        <x:copy copy-namespaces="no"> 
          <x:copy-of select="@*"/>
          <x:apply-templates mode="#current"/>
        </x:copy>
      </x:template>
      
      <x:function name="r:match-string" as="element(r:result)">
        <x:param name="string" as="xs:string?"/>
        <x:param name="regex" as="xs:string"/>
        <x:param name="result-name" as="xs:string"/>
        
        <r:result>
          <x:analyze-string select="string($string)">
            <xsl:attribute name="regex">^{$regex}</xsl:attribute>
            <x:matching-substring>
              <x:element>
                <xsl:attribute name="name">r:{$result-name}</xsl:attribute>
                <x:value-of select="."/>
              </x:element>
            </x:matching-substring>
            <x:non-matching-substring>
              <r:remainder>
                <x:value-of select="."/>
              </r:remainder>
            </x:non-matching-substring>
          </x:analyze-string>
        </r:result>
      </x:function>
    
      <xsl:apply-templates select="p:term"/>
      
      <xsl:apply-templates select="//p:zeroOrMore|//p:oneOrMore" 
        mode="make-function"/>
    </x:stylesheet>
  </xsl:template>
  
  <xd:doc>
    <xd:short>Call evaluate-group.  Leave a set of variables:
    $group-result containing the entire group result,
    $match containing the matching part,
    $no-match containing result of no match,
    $remainder containing the remainder</xd:short>
  </xd:doc>
  <xsl:template name="call-evaluate-group">
    <x:variable name="group-result" as="element()+">
      <xsl:call-template name="evaluate-group"/>
    </x:variable>
    <x:variable name="match" 
      select="$group-result/self::r:* except 
        ($group-result/self::r:no-match|$group-result/self::r:remainder)"
        as="element()*" />
    <x:variable name="no-match" select="$group-result/self::r:no-match"
      as="element(r:no-match)?"/>
    <x:variable name="remainder" select="$group-result/self::r:remainder" 
      as="element(r:remainder)?"/>
  </xsl:template>
  
  <xd:doc>
    <xd:short>Create a randomly named function for each occurrence of
     zeroOrMore and oneOrMore</xd:short>
  </xd:doc>
  <xsl:template match="p:zeroOrMore|p:oneOrMore" mode="make-function">
    <xsl:variable name="function-name" as="xs:string" 
      select="generate-id(.)"/>
    <x:function name="r:{$function-name}" as="element()+">
      <x:param name="string" as="xs:string?"/>
      
      <xsl:call-template name="call-evaluate-group"/>
      <!-- x:message>zeroOrMore|oneOrMore (string='<x:value-of select="$string"/>'):
      match=<x:sequence select="$match"/>
      no-match=<x:sequence select="$no-match"/>
      remainder=<x:sequence select="$remainder"/>
      </x:message-->
      <x:choose>
        <x:when test="$group-result/self::r:no-match">
          <xsl:if test="self::p:oneOrMore">
            <r:no-match/>  
          </xsl:if>
          <r:remainder>
            <x:value-of select="$remainder"/>
          </r:remainder>
        </x:when>
        <x:when test="count($group-result/element())=
          count($group-result/self::r:empty)">
          <!--  there were matches, but they were all to empty -->
          <r:empty/>
          <x:sequence select="$remainder"/>
        </x:when>
        <x:otherwise>
          <!--  there is a non-empty match, recurse to the next if *OrMore -->
          <x:variable name="next-group" as="element()*" 
            select="if (string-length($remainder) &gt; 0)
            then r:{$function-name}(string($remainder))
            else ()"/>
          <x:variable name="next-group-match" 
            select="$next-group/self::r:* except 
            ($next-group/self::r:no-match|$next-group/self::r:remainder)"
            as="element()*"/>
      
          <x:sequence select="($match, $next-group-match, 
            $next-group/self::r:remainder)"/>
        </x:otherwise>
      </x:choose>
    </x:function>
  </xsl:template>
  
  <xd:doc>
    <xd:short>Manage the $previous-remainder, $failed variables,
    return with 
    $function-result, 
    $match, 
    $no-match,
    and $remainder in scope</xd:short>
  </xd:doc>
  <xsl:template name="begin-process">
    <xsl:param name="function-to-call" as="xs:string" required="yes"/>
    
    <x:variable name="previous-remainder" as="element(r:remainder)?">
      <x:if test="string-length($remaining-string) &gt; 0">
        <r:remainder>
          <x:value-of select="$remaining-string"/>
        </r:remainder>
      </x:if>
    </x:variable>
    <x:variable name="function-result" as="element()+"
      select="if ($failed) 
        then ($no-match-result, $previous-remainder)
        else r:{$function-to-call}($remaining-string)"/>
    <x:message>Testing <xsl:value-of select="$function-to-call"/>(<x:sequence select="tokenize($remaining-string,'\s')[1]"/>)=[<x:value-of select="boolean(not($function-result/self::r:no-match))"/>]
    </x:message>
    <x:variable name="match"
      select="$function-result/self::r:* except 
        ($function-result/self::r:remainder|
        $function-result/self::r:no-match)"/>
    <x:variable name="no-match"
      select="$function-result/self::r:no-match"/>
    <x:variable name="remainder" 
      select="$function-result/self::r:remainder" 
      as="element(r:remainder)?"/>
  </xsl:template>
  
  <xd:doc>
    <xd:short>Update $remaining-string and $failed,
    add r:remainder term to template return value</xd:short>
  </xd:doc>
  <xsl:template name="end-process">
    <x:variable name="remaining-string" as="xs:string?"
      select="string($remainder)"/>
    <x:variable name="failed" as="xs:boolean"
      select="$failed or $no-match"/>
    <xsl:if test="position()=last()">
      <x:if test="string-length($remaining-string) &gt; 0">
        <r:remainder>
          <x:value-of select="$remaining-string"/>
        </r:remainder>
      </x:if>
    </xsl:if>
  </xsl:template>
  
  <xd:doc>
    <xd:short>zeroOrOne is syntactic sugar for 
    choice/(empty,*)</xd:short>
  </xd:doc>
  <xsl:template match="p:zeroOrOne">
    <xsl:variable name="desugared">
      <p:choice>
        <xsl:sequence select="*"/>
        <p:empty/>
      </p:choice>
    </xsl:variable>
    <xsl:apply-templates select="$desugared"/>
  </xsl:template>
  
  <xd:doc>
    <xd:short>Test a named term.  Return:
      r:{term-name}|r:anonymous, r:remainder?
      r:no-match, r:remainder?
    </xd:short>
  </xd:doc>
  <xsl:template match="p:termRef|p:termRefAnon">
    <xsl:variable name="term-name" as="xs:string"
      select="if (./self::p:termRefAnon) 
      then 'anonymous'
      else @name"/>
    <xsl:call-template name="begin-process">
      <xsl:with-param name="function-to-call" as="xs:string"
        select="@name"/>
    </xsl:call-template>
    <x:choose>
      <x:when test="$match">
        <!-- allow r:anonymous and @alias -->
        <x:element name="r:{(@alias, $term-name)[1]}"> 
          <x:sequence select="$match/node()"/>
        </x:element>
      </x:when>
      <x:otherwise>
        <x:sequence select="$no-match"/>
      </x:otherwise>
    </x:choose>
    
    <xsl:call-template name="end-process"/>
  </xsl:template>
  
  <xd:doc>
    <xd:short>Test an expression.  Return either:
    r:{expression-name}|r:anonymous, r:remainder?
    r:no-match, r:remainder?
    </xd:short>
  </xd:doc>
  <xsl:template match="p:exp|p:expAnon">
    <xsl:variable name="expression-name" 
      as="xs:string" select="if (./self::p:expAnon) 
        then 'anonymous' 
        else (@name, generate-id(.))[1]"/>
    <x:variable name="already-failed-result" as="element(r:result)">
      <r:result>
        <x:if test="string-length($remaining-string) &gt; 0">
          <r:remainder>
            <x:value-of select="$remaining-string"/>
          </r:remainder>
        </x:if>
      </r:result>  
    </x:variable>
    <x:variable name="{$expression-name}" as="element(r:result)"
      select="if ($failed)
      then $already-failed-result
      else r:match-string($remaining-string, '{.}', '{$expression-name}')"/>
    <x:variable name="expression-return" as="element()+"
      select="(${$expression-name}/r:{$expression-name}, $no-match-result)[1]"/>
    <x:variable name="no-match" select="$expression-return/self::r:no-match"/>
    <x:variable name="remainder" as="element(r:remainder)?"
      select="${$expression-name}/r:remainder"/>
      
    <x:sequence select="$expression-return"/>
    
    <!-- x:message>{{{expression: '<xsl:value-of select="."/>', 
    string: '<x:value-of select="$remaining-string"/>',
    return: <x:value-of select="${$expression-name}"/>
    actual return: <x:sequence   select="(${$expression-name}/r:{$expression-name}, $no-match-result)[1]"/>
    remaining-string: <x:value-of select="$remaining-string"/>(<x:value-of select="string-length($remaining-string)"/>)
    }}}    
    </x:message-->
    <xsl:call-template name="end-process"/>
  </xsl:template>
  
  <xsl:template match="p:end">
    <x:variable name="end-result" as="element()+">
      <x:choose>
        <x:when test="string-length($remaining-string)=0">
          <r:end/>
        </x:when>
        <x:otherwise>
          <x:sequence select="$no-match-result"/>
        </x:otherwise>
      </x:choose>
    </x:variable>
    <x:variable name="no-match" select="$end-result/self::r:no-match"/>
    <x:sequence select="$end-result"/>
    <xsl:call-template name="end-process"/>
  </xsl:template>
  
  <xd:doc>
    <xd:short>Evaluate a group of p:*.
    Return: (r:{term-names}, r:remainder?) or
    (r:no-match, r:remainder?)
    </xd:short>
  </xd:doc>
  <xsl:template name="evaluate-group">
    <x:variable name="remaining-string" as="xs:string"
        select="string($string)"/>
    <x:variable name="failed" as="xs:boolean" select="false()"/>
    <!--  group-result contains (r:{term-name}*, r:remainder?) -->
    <x:variable name="group-result" as="element()+">
      <xsl:apply-templates 
        select="p:choice|p:termRef|p:termRefAnon|p:exp|p:expAnon|p:end|
          p:zeroOrMore|p:oneOrMore"/>
    </x:variable>
    <x:variable name="match" as="element()*"
      select="$group-result/self::r:* except 
        ($group-result/self::r:no-match|$group-result/self::r:remainder)"/>
    <x:variable name="no-match" as="element(r:no-match)*"
      select="$group-result/self::r:no-match"/>
    <x:variable name="remainder" as="element(r:remainder)?"
      select="$group-result/self::r:remainder"/>
    <x:sequence select="if ($no-match)
      then $no-match-result else $match"/>
    <x:variable name="failed" as="xs:boolean"
      select="$failed or $no-match"/>
    <x:variable name="remaining-string" as="xs:string?"
      select="if ($no-match) 
        then $remaining-string
        else $remainder"/>
    <x:if test="string-length($remaining-string) &gt; 0">
      <r:remainder>
        <x:value-of select="$remaining-string"/>
      </r:remainder>
    </x:if>
    
  </xsl:template>
  
  <xsl:template match="p:group">
    <xsl:call-template name="evaluate-group"/>
  </xsl:template>
  
  <xsl:template match="p:zeroOrMore|p:oneOrMore">
    <xsl:call-template name="begin-process">
      <xsl:with-param name="function-to-call" as="xs:string"
        select="generate-id(.)"/>
    </xsl:call-template>
    <x:sequence select="($match,$no-match)"/>
    <xsl:call-template name="end-process"/> 
  </xsl:template>
  
  <xsl:template match="p:choice">
    <xsl:variable name="context" select="current()"/>
    <x:variable name="choice" as="element(r:matched-choice)*">
      <x:if test="not($failed)">
        <xsl:for-each select="p:group|p:termRef|p:termRefAnon|p:choice|p:exp|
          p:expAnon|p:end">
          <x:variable name="choice-result" as="element()+">
            <xsl:apply-templates select="."/>
          </x:variable>
          <x:variable name="match" 
            select="$choice-result/self::r:* except 
              ($choice-result/self::r:remainder|
              $choice-result/self::r:no-match)"/>
          <x:variable name="no-match" select="$choice-result/self::r-no-match"/>
          <x:variable name="remainder" 
            select="$choice-result/self::r:remainder"/>
          <x:if test="$match">
            <r:matched-choice>
              <x:sequence select="($match,$remainder)"/>
            </r:matched-choice>
          </x:if>        
        </xsl:for-each>
      </x:if>
    </x:variable>
    <x:variable name="n-choice-match" as="xs:integer"
      select="count($choice/self::r:matched-choice)"/>
    <!-- x:message>p:choice:
    choice = <x:sequence select="$choice"/>
    count(choice) = <x:value-of select="$n-choice-match"/>
    </x:message-->
    
    <x:variable name="choice-result" as="element()+">
      <x:choose>
        <x:when test="$n-choice-match=0">
          <xsl:choose>
            <xsl:when test="p:empty">
              <r:empty/>
            </xsl:when>
            <xsl:otherwise>
              <r:no-match/>
            </xsl:otherwise>
          </xsl:choose>
        </x:when>
        <x:when test="$n-choice-match &gt; 1">
          <!-- x:message>chc/r-m-c=<x:sequence select="$choice/self::r:matched-choice"/></x:message-->
          <x:variable name="choice-string-lengths"
            select="for $i in $choice 
              return string-length($i/r:* except $i/r:remainder)"/>
          <x:sequence select="$choice[
            index-of($choice-string-lengths, max($choice-string-lengths))][1]
            /r:*
            "/>
        </x:when>
        <x:otherwise>
          <x:sequence select="$choice/self::r:matched-choice/r:*"/>
        </x:otherwise>
      </x:choose>
    </x:variable>
    
    <x:variable name="failed" as="xs:boolean"
      select="$failed or $choice-result/self::r:no-match"/>
    <x:variable name="remaining-string" as="xs:string?" 
      select="if ($n-choice-match=0) 
        then $remaining-string 
        else $choice-result/self::r:remainder"/>
    <x:sequence select="$choice-result/self::r:* except 
      $choice-result/self::r:remainder"/>
    <xsl:if test="position()=last()">
      <x:if test="string-length($remaining-string) &gt; 0">
        <r:remainder>
          <x:value-of select="$remaining-string"/>
        </r:remainder>
      </x:if>
    </xsl:if>
  </xsl:template>
  
  <xd:doc>
    <xd:short>Each term produces a function in the 'r'
    namespace that tests whether the term matches the given string.
    </xd:short>
  </xd:doc>
  <xsl:template match="p:term">
    <x:function name="r:{@name}" as="element()+">
      <x:param name="string" as="xs:string?"/>
      <xsl:call-template name="call-evaluate-group"/>
      <!-- x:message>p:term for <xsl:value-of select="@name"/>
      result: <x:sequence select="$group-result"/>
      match: <x:sequence select="$match"/>
      no-match: <x:sequence select="$no-match"/>
      remainder: <x:sequence select="$remainder"/>
      </x:message-->
      <x:choose>
        <x:when test="$match">
          <x:element name="r:{@name}">
            <x:sequence select="$match"/>
          </x:element>
          <x:sequence select="$remainder"/>  
        </x:when>
        <x:otherwise>
          <x:sequence select="($no-match, $remainder)"/>
        </x:otherwise>
      </x:choose>
    </x:function>
  </xsl:template>
</xsl:stylesheet>