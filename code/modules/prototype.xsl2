<?xml version="1.0" encoding="UTF-8"?>
<!-- prototype.xsl2
  Copyright 2010 Efraim Feinstein <efraim.feinstein@gmail.com>
  Licensed under the GNU Lesser General Public License, version 3 or later

	apply-templates to a prototype of an instance and pass the corresponding data
	as the parameter $data.  The result will be a merged instance containing 
	the instance prototype filled in with the data from $data

	Special cases are:
		@xml:id = 'new': if found in the prototype, ignore it
		tei:name: return the string value of it. 
 -->
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:tei="http://www.tei-c.org/ns/1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:local="local-function" version="2.0" exclude-result-prefixes="xs" extension-element-prefixes="local">
		<!-- whether names should be collapsed into strings.
        May have any type that resolves to a boolean -->
		<xsl:param name="collapse-names" as="xs:anyAtomicType" select="true()"/>

    <xsl:function name="local:is-parallel-element" as="xs:boolean">
        <xsl:param name="elem" as="element()"/>
        <xsl:param name="prototype" as="element()"/>
        <xsl:sequence select="$elem/name()=$prototype/name() and         count($prototype/@*) &gt;= count($elem/@*) and            (             every $attribute in $prototype/@* satisfies             (               if (string-length($attribute))               then string($elem/@*[name()=$attribute/name()])=string($attribute)               else true()             ),             true() (: no attributes in prototype :)           )[1]"/>
    </xsl:function>
    
    <!-- if a parameter has a value in the prototype, keep it,
      otherwise, use the value in the data or an empty string -->
    <xsl:template match="@*">
        <xsl:param name="data" as="element()?"/>
        <xsl:variable name="parallel-attribute" as="attribute()?" select="$data/@*[name()=current()/name()]"/>
        <xsl:sequence select="         if (string-length(.))         then .         else ($parallel-attribute, .)[1]       "/>
    </xsl:template>
    
		<!-- in prototype files, xml:id is a special attribute because it has to have a value.
		If it has the value "new", by convention, that means it should be replaced by the
		empty string -->
    <xsl:template match="@xml:id">
        <xsl:param name="data" as="element()?"/>

        <xsl:variable name="parallel-attribute" as="attribute()?" select="$data/@xml:id"/>
				<xsl:variable name="empty-attribute" as="attribute()">
					<xsl:attribute name="xml:id" select="''"/>
				</xsl:variable>
        <xsl:sequence select="($parallel-attribute, if (string(.) = 'new') then $empty-attribute else .)[1]"/>
    </xsl:template>
    
		<!-- special handling for tei:name -->
    <xsl:template match="tei:name" as="element()" priority="10">
      <xsl:param name="data" as="element()?"/>

      <xsl:choose>
				<xsl:when test="$collapse-names">
        	<xsl:choose>
            <xsl:when test="$data">
                <xsl:copy>
                    <xsl:apply-templates select="@*">
                        <xsl:with-param name="data" as="element()?" select="$data"/>
                    </xsl:apply-templates>
                    <xsl:sequence select="string-join($data//text(),' ')"/>
                </xsl:copy>
            </xsl:when>
          	  <xsl:otherwise>
          <!-- no parallel element, make one -->
                <xsl:sequence select="."/>
            </xsl:otherwise>
        </xsl:choose>
				</xsl:when>
				<xsl:otherwise><!-- not(collapse-names) -->
					<xsl:next-match>
						<xsl:with-param name="data" as="element()?" select="$data"/>
					</xsl:next-match>
				</xsl:otherwise>
			</xsl:choose>
    </xsl:template>

    <!-- $data has the same element or nothing -->
    <xsl:template match="*" as="element()">
        <xsl:param name="data" as="element()?"/>
      
      <!--xsl:message>
      element = <xsl:sequence select="."/>
      parallel element = <xsl:sequence select="$data"/>
      </xsl:message-->
        <xsl:choose>
            <xsl:when test="$data">
                <xsl:copy>
                    <xsl:apply-templates select="@*">
                        <xsl:with-param name="data" as="element()?" select="$data"/>
                    </xsl:apply-templates>
                    <xsl:for-each select="element()">
                      <xsl:variable name="parallel-elements" as="element()*" select="$data/element()[local:is-parallel-element(., current())]"/>
                      <xsl:variable name="context" select="." as="element()"/>
                      <xsl:for-each select="if ($parallel-elements) then $parallel-elements else 0">
	                    	<xsl:apply-templates select="$context">
  	                    	<xsl:with-param name="data" as="element()?" select="                     if (. instance of xs:integer)                     then ()                     else ."/>
    	                  </xsl:apply-templates>
                   		</xsl:for-each>
                    </xsl:for-each>
                    <xsl:sequence select="$data/text()"/>
                </xsl:copy>
            </xsl:when>
            <xsl:otherwise>
          <!-- no parallel element, make one -->
                <xsl:sequence select="."/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
</xsl:stylesheet>
