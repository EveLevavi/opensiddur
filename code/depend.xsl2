<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet
	version="2.0" 
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:tei="http://www.tei-c.org/ns/1.0"
	xmlns:j="urn:jewish-liturgy-extension"
	xmlns:tr="urn:transliterator"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:xd="http://www.pnp-software.com/XSLTdoc"
	extension-element-prefixes="xs xd"
	>
	<xsl:include href="common.xsl2"/>
	<xd:doc type="stylesheet">
		<xd:short>Processes a stylesheet or a JLPTEI file and finds dependencies. </xd:short>
		<xd:author>$Author: efraim.feinstein $</xd:author>
		<xd:svnId>$Id: depend.xsl2 189 2009-06-17 00:42:40Z efraim.feinstein $</xd:svnId>
		<xd:copyright>Copyright 2008-2009 Efraim Feinstein (LGPL 3+)</xd:copyright>
		<xd:detail>
			<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>
			<p>This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.</p>
			<p>You should have received a copy of the GNU Lesser General Public License
				along with this program.  If not, see <a href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>.</p>
		</xd:detail>
	</xd:doc>
	
	<xsl:output encoding="utf8" method="text"/>
	
	
	<xd:doc>
		<xd:short>Follow links to find additional dependencies in TEI files.  Returns a sequence of strings</xd:short>
	</xd:doc>
	<xsl:template match="element()[@copyOf|@target|@targets|@j:include|@j:omit]" mode="depend" priority="10002">
		<xsl:variable name="context" select="base-uri(.)"/>
		<!--xsl:message>context: <xsl:sequence select="$context"/></xsl:message-->
		<xsl:variable name="targets" select="(@copyOf,@target,tokenize(@targets,'\s+'),tokenize(@j:include,'\s+')),tokenize(@j:omit,'\s+')" as="xs:string+"/>
		<!--xsl:message>targets: <xsl:sequence select="$targets"/></xsl:message-->
		<xsl:for-each select="$targets">
			<xsl:variable name="target" select="." as="xs:string"/>
			<!--xsl:message>target=<xsl:value-of select="$target"/></xsl:message-->
			<xsl:variable name="target-absolute-uri" select="resolve-uri($target,$context)"/>
			<!--xsl:message>target-absolute-uri=<xsl:value-of select="$target-absolute-uri"/></xsl:message-->
			<xsl:if test="not(starts-with($target-absolute-uri,'http'))">
				<xsl:variable name="target-file-uri" select="if (contains($target-absolute-uri,':')) then substring-after($target-absolute-uri,':') else $target-absolute-uri"/>
				<!--xsl:message>target-file-uri=<xsl:value-of select="$target-file-uri"/></xsl:message-->
				<xsl:variable name="target-base" select="if (contains($target-file-uri,'#')) then substring-before(string($target-file-uri),'#') else $target-file-uri"/>
				<xsl:variable name="target-fragment" select="if (contains($target-file-uri,'#')) then substring-after($target-file-uri,'#') else ''"/>
				<!--xsl:message>base= <xsl:value-of select="$target-base"/> fragment=<xsl:value-of select="$target-fragment"/></xsl:message-->
				<xsl:variable name="dependencies" as="xs:string*">
					<xsl:apply-templates select="if (string-length($target-fragment) &gt; 0) 
					then document($target-base)//*[@xml:id=$target-fragment]
					else document($target-base) " mode="depend"/>
				</xsl:variable>
				<xsl:sequence select="($target-base,$dependencies)"/>
			</xsl:if>
		</xsl:for-each>
	</xsl:template>
	
	<xd:doc>
		<xd:short>Find explicitly included files, returns a sequence of strings.</xd:short>
	</xd:doc>
	<xsl:template match="xi:include|xsl:import|xsl:include" mode="depend" priority="10001">
		<!--xsl:value-of select="@href"/-->
		<xsl:apply-templates select="document(@href)" mode="#current"/>
	</xsl:template>
	
	<xsl:template match="element()" mode="depend" priority="10000">
		<xsl:apply-templates mode="#current"/>
	</xsl:template>
	
	<xd:doc>
		<xd:short>Ignore text in depend mode</xd:short>
	</xd:doc>
	<xsl:template match="text()" mode="depend"/>
	
	<xd:doc>
		<xd:short>Process root elements in depend mode (or at start of the file)</xd:short>
	</xd:doc>
	<xsl:template match="/" mode="#default depend">
		<xsl:variable name="list-of-files" as="xs:string*">
			<xsl:apply-templates mode="depend"/>
		</xsl:variable>
		<xsl:variable name="current-uri" select="replace(document-uri(.), '\./','')" />
		<xsl:variable name="list" select="(substring-after($current-uri, ':'), $list-of-files)" as="xs:string*"/>
		
		<xsl:sequence select="distinct-values($list)"/>
	</xsl:template>
</xsl:stylesheet>