<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet
  version="2.0"
  xmlns="http://www.w3.org/1999/xhtml"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:tei="http://www.tei-c.org/ns/1.0"
  xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0"
  xmlns:jx="http://jewishliturgy.org/ns/jlp-processor"
  xmlns:func="http://jewishliturgy.org/ns/functions/xslt"
  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
  xmlns:cc="http://web.resource.org/cc/"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:xd="http://www.pnp-software.com/XSLTdoc"
  exclude-result-prefixes="#all"
  >
  <xsl:import href="muxhtml.xsl2"/>
  <xsl:import href="../../../common/common.xsl2"/>
  <xsl:import href="../../intl-strings.xsl2"/>
  <xd:doc type="stylesheet">
    <xd:short>Render bibliography in XHTML</xd:short>
    <xd:detail>This code is heavily based on the TEI XSLT code in 
    common/core.xsl and xhtml/core.xsl</xd:detail>
    <xd:copyright>Copyright 2010 Efraim Feinstein (LGPL 3+), 
    Copyright 2008 TEI Consortium</xd:copyright>
    <xd:detail>
        <p>This program is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.</p>

        <p>This program is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.</p>

        <p>You should have received a copy of the GNU Lesser General Public License
        along with this program.  If not, see 
        <a href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>.
        </p>
      </xd:detail>
      <xd:svnId>$Id: bibliography-xhtml.xsl2 687 2011-01-23 23:36:48Z efraim.feinstein $</xd:svnId>
  </xd:doc>
  
  <xsl:param name="string-table" as="document-node()" 
    select="doc('strings.xml')"/>
  <xsl:param name="primary-language" as="xs:string" select="'en'"/>
  
  <xd:doc>
    <xd:short>Process elements tei:listBibl</xd:short>
    <xd:detail> </xd:detail>
  </xd:doc>
  <xsl:template match="tei:listBibl">
    <xsl:for-each select="tei:biblStruct">
      <xsl:sort select="lower-case(string-join(
        (tei:*/tei:author/tei:surname,
        tei:*[1]/tei:author/tei:orgName,
        tei:*[1]/tei:author/tei:name,
        tei:*[1]/tei:editor/tei:surname,
        tei:*[1]/tei:editor/tei:name,
        tei:*[1]/tei:title),' '))"/>
      <xsl:sort select="tei:monogr/tei:imprint/tei:date"/>
      <!-- anchor 
        <xsl:call-template name="makeAnchor"/>
        <xsl:apply-templates select="." mode="xref"/>
      -->
      <xsl:apply-templates select="." mode="bibl"/>
      
    </xsl:for-each>
  </xsl:template>
  
  <xd:doc>
    <xd:short>Default for bibliography mode is pass</xd:short>
  </xd:doc>
  <xsl:template match="*" mode="bibl">
    <xsl:apply-templates mode="#current"/>
  </xsl:template>
  
  <xd:doc>
    <xd:short>Send elements for regular processing</xd:short>
  </xd:doc>
  <xsl:template match="tei:ref|tei:ptr" mode="bibl">
    <xsl:apply-templates select="."/>
  </xsl:template>
  
  <xd:doc>
    <xd:short>Process elements tei:edition</xd:short>
    <xd:detail> </xd:detail>
  </xd:doc>
  <xsl:template match="tei:edition" mode="bibl">
    <div class="bibl-edition">
      <xsl:call-template name="write-xml-lang"/>
      <xsl:apply-templates mode="#current">
        <xsl:with-param name="unhandled-lang" tunnel="yes" select="()"/>
      </xsl:apply-templates>
      <xsl:text>. </xsl:text>
    </div>
  </xsl:template>


  <xd:doc>
    <xd:short>Process elements tei:imprint</xd:short>
    <xd:detail> </xd:detail>
  </xd:doc>
  <xsl:template match="tei:imprint" mode="bibl">
    <xsl:apply-templates select="tei:date" mode="#current"/>
    <xsl:apply-templates select="tei:pubPlace" mode="#current"/>
    <xsl:apply-templates select="tei:publisher" mode="#current"/>
    <xsl:apply-templates select="tei:distributor" mode="#current"/>
    <xsl:apply-templates select="tei:biblScope" mode="#current"/>
  </xsl:template>

  <xd:doc>
    <xd:short>Process author/editor names</xd:short>
  </xd:doc>
  <xsl:template match="tei:author|tei:editor" mode="bibl">
    <xsl:if test="not(@corresp)">
    <!-- only include when it's the original, 
    not a translation -->
      <xsl:variable name="n-following" as="xs:integer" 
          select="count(following-sibling::*
            [name()=current()/name()][not(@corresp)])"/>
      <div class="bibl-{local-name()}">
        <xsl:call-template name="write-xml-lang"/>
        <xsl:apply-templates mode="#current" >
          <xsl:with-param name="unhandled-lang" tunnel="yes" select="()"/>
        </xsl:apply-templates>
      </div>
      <xsl:value-of select="
          if (self::tei:author and $n-following eq 0)
          then '.' (: last name in a list :)
          else if (self::tei:editor and $n-following eq 0)
          then string-join((' (ed', 
            if (preceding-sibling::tei:editor) then 's' else (),
            '.) '),'') (: editor :) 
          else if ($n-following eq 1)
          then ' and ' (: penultimate in list :)
          else ', ' (: first or middle name in a list :)"/>
    </xsl:if>
  </xsl:template>

  <xsl:template  match="tei:surname" mode="bibl">
    <xsl:if test="../tei:roleName">
      <xsl:apply-templates select="../tei:roleName" mode="use-bibl"/>
      <xsl:text> </xsl:text>
    </xsl:if>
    <xsl:if test="../tei:forename">
      <xsl:apply-templates select="../tei:forename" mode="use-bibl"/>
      <xsl:text> </xsl:text>
    </xsl:if>
    <xsl:if test="../tei:nameLink">
      <xsl:apply-templates select="../tei:nameLink" mode="use-bibl"/>
      <xsl:text> </xsl:text>
    </xsl:if>
    <div class="bibl-surname">
      <xsl:call-template name="write-xml-lang"/>
      <xsl:apply-templates mode="#current">
        <xsl:with-param name="unhandled-lang" tunnel="yes" select="()"/>
      </xsl:apply-templates>
    </div>
  </xsl:template>

  <xsl:template match="tei:forename" mode="bibl"/>
  <xsl:template match="tei:nameLink" mode="bibl"/>

  <xsl:template  match="tei:forename" mode="use-bibl">
    <xsl:if test="preceding-sibling::tei:forename">
      <xsl:text> </xsl:text>
    </xsl:if>
    <xsl:apply-templates mode="bibl"/>
  </xsl:template>

  <xsl:template  match="tei:nameLink" mode="use-bibl">
    <xsl:apply-templates mode="bibl"/>
  </xsl:template>

  <!-- TODO: differentiate between monogr, analytic and series titles -->
  <xsl:template match="tei:title" mode="bibl">
    <xsl:choose>
      <xsl:when test="@level=('m','main') or not(@level)">
        <div class="bibl-title-main">
          <xsl:call-template name="write-xml-lang"/>
          <xsl:apply-templates mode="#current">
            <xsl:with-param name="unhandled-lang" tunnel="yes" select="()"/>
          </xsl:apply-templates>
        </div>
      </xsl:when>
      <xsl:when test="@level=('s','sub')">
        <div class="bibl-title-sub">
          <xsl:call-template name="write-xml-lang"/>
          <xsl:apply-templates mode="#current">
            <xsl:with-param name="unhandled-lang" tunnel="yes" select="()"/>
          </xsl:apply-templates>
          <xsl:if test="following-sibling::*">
            <xsl:text> </xsl:text>
          </xsl:if>
        </div>
      </xsl:when>
      <xsl:otherwise>
        <div class="bibl-title-other">
          <xsl:call-template name="write-xml-lang"/>
          <xsl:apply-templates mode="#current">
            <xsl:with-param name="unhandled-lang" tunnel="yes" select="()"/>
          </xsl:apply-templates>
        </div>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:text>. </xsl:text>
  </xsl:template>

  <xsl:template match="tei:meeting" mode="bibl">
    <div class="bibl-meeting">
      <xsl:call-template name="write-xml-lang"/>
      <xsl:text> (</xsl:text>
        <xsl:apply-templates mode="#current">
          <xsl:with-param name="unhandled-lang" tunnel="yes" select="()"/>
        </xsl:apply-templates>
      <xsl:text>)</xsl:text>
      <xsl:if test="following-sibling::*">
        <xsl:text> </xsl:text>
      </xsl:if>
    </div>
  </xsl:template>

  <xsl:template match="tei:date" mode="bibl">
    <div class="bibl-date">
      <xsl:call-template name="write-xml-lang"/>
      <xsl:if test="@type='access'">
        <xsl:text>Accessed </xsl:text>
      </xsl:if>
      <xsl:apply-templates mode="#current">
        <xsl:with-param name="unhandled-lang" tunnel="yes" select="()"/>
      </xsl:apply-templates>
      <xsl:if test="following-sibling::*">
        <!-- if there are additional followers, separate them, otherwise,
        the top level will -->
        <xsl:text>. </xsl:text>
      </xsl:if>
    </div>
  </xsl:template>

  <xsl:template match="tei:pubPlace" mode="bibl">
    <div class="bibl-pubPlace">
      <xsl:call-template name="write-xml-lang"/>
      <xsl:apply-templates mode="#current">
        <xsl:with-param name="unhandled-lang" tunnel="yes" select="()"/>
      </xsl:apply-templates>
      
      <xsl:choose>
        <xsl:when test="following-sibling::tei:pubPlace">
          <xsl:text>, </xsl:text>
        </xsl:when>
        <xsl:when test="../tei:publisher">
          <xsl:text>: </xsl:text>
        </xsl:when>
        <xsl:otherwise>
          <xsl:text>. </xsl:text>
        </xsl:otherwise>
      </xsl:choose>
    </div>
  </xsl:template>

  <xsl:template match="tei:publisher" mode="bibl">
    <div class="bibl-publisher">
      <xsl:call-template name="write-xml-lang"/>
      <xsl:apply-templates mode="#current">
        <xsl:with-param name="unhandled-lang" tunnel="yes" select="()"/>
      </xsl:apply-templates>
      <xsl:text>. </xsl:text>
    </div>
  </xsl:template>

  <!-- details and notes -->
  <xsl:template match="tei:biblScope" mode="bibl">
    <xsl:choose>
      <xsl:when test="ancestor::tei:bibl">
        <xsl:apply-templates mode="#current"/>
      </xsl:when>
      <xsl:when test="@type='vol'">
        <div class="bibl-scope-vol">
          <xsl:call-template name="write-xml-lang"/>
          <xsl:apply-templates mode="#current">
            <xsl:with-param name="unhandled-lang" tunnel="yes" select="()"/>
          </xsl:apply-templates>
        </div>
      </xsl:when>
      <xsl:when test="@type='chap'">
        <xsl:text>chapter </xsl:text>
        <xsl:apply-templates mode="#current"/>
      </xsl:when>
      <xsl:when test="@type='issue'">
        <xsl:text> (</xsl:text>
        <xsl:apply-templates mode="#current"/>
        <xsl:text>) </xsl:text>
      </xsl:when>
      <xsl:when test="@type='pp'">
        <xsl:choose>
          <xsl:when test="contains(.,'-')">
            <xsl:text>pp. </xsl:text>
          </xsl:when>
          <xsl:when test="contains(.,'ff')">
            <xsl:text>pp. </xsl:text>
          </xsl:when>
          <xsl:when test="contains(.,' ')">
            <xsl:text>pp. </xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:text>p. </xsl:text>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:apply-templates mode="#current"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates mode="#current"/>
      </xsl:otherwise>
    </xsl:choose>
 
    <xsl:choose>
      <xsl:when test="@type='vol' and
       following-sibling::tei:biblScope[@type='issue']">
        <xsl:text> </xsl:text>
      </xsl:when>
      <xsl:when test="@type='vol' and following-sibling::tei:biblScope">
        <xsl:text> </xsl:text>
      </xsl:when>
      <xsl:when test="following-sibling::tei:biblScope">
        <xsl:text> </xsl:text>
      </xsl:when>
      <xsl:when test="ancestor::tei:biblStruct">
        <xsl:text>. </xsl:text>
      </xsl:when>
    </xsl:choose>

  </xsl:template>

  <xsl:template match="tei:idno" mode="bibl">
    <xsl:text> </xsl:text>
    <xsl:apply-templates mode="#current"/>
  </xsl:template>

  <xsl:template match="tei:idno[@type=('doi','isbn','ISBN')]" mode="bibl"/>
  
  <xsl:template match="tei:biblStruct" mode="bibl">
    <div class="bibl-entry">
      <xsl:call-template name="write-xml-lang"/>
      <div class="bibl-authors">
        <xsl:apply-templates select="tei:*/tei:author" mode="#current">
          <xsl:with-param name="unhandled-lang" tunnel="yes" select="()"/>
        </xsl:apply-templates>
      </div>
      <div class="bibl-editors">
        <xsl:apply-templates select="tei:*/tei:editor" mode="#current">
          <xsl:with-param name="unhandled-lang" tunnel="yes" select="()"/>
        </xsl:apply-templates>
      </div>
      <div class="bibl-titles">
        <xsl:apply-templates select="(tei:analytic, tei:monogr, tei:series)/tei:title" mode="#current">
          <xsl:with-param name="unhandled-lang" tunnel="yes" select="()"/>
        </xsl:apply-templates>
      </div>
      <xsl:apply-templates select="tei:*/(tei:edition, tei:imprint)" mode="#current">
        <xsl:with-param name="unhandled-lang" tunnel="yes" select="()"/>
      </xsl:apply-templates>
      <div class="bibl-notes">
        <xsl:apply-templates select="tei:note" mode="#current">
          <xsl:with-param name="unhandled-lang" tunnel="yes" select="()"/>
        </xsl:apply-templates>
      </div>
    </div>
  </xsl:template>
  
  <xd:doc>
    <xd:short>Bibliographic note.  Applies templates in default mode.</xd:short>
  </xd:doc>
  <xsl:template match="tei:note" mode="bibl">
    <div class="bibl-note">
      <xsl:call-template name="write-xml-lang"/>
      <xsl:apply-templates>
        <xsl:with-param name="unhandled-lang" tunnel="yes" select="()"/>
      </xsl:apply-templates>
    </div>
  </xsl:template>
  
  <xsl:template match="tei:distributor" mode="bibl">
    <div class="bibl-distributor">
      <xsl:call-template name="write-xml-lang"/>
      <xsl:text>Distributed by </xsl:text>
      <xsl:apply-templates mode="#current">
        <xsl:with-param name="unhandled-lang" tunnel="yes" select="()"/>
      </xsl:apply-templates>
      <xsl:text>.</xsl:text>
    </div>
  </xsl:template>
  
  <xd:doc>
    <xd:short>Treat text as default mode, unless it shouldn't receive
    additional spaces</xd:short>
  </xd:doc>
  <xsl:template match="text()" mode="bibl">
    <xsl:choose>
      <xsl:when test="ancestor::tei:name/descendant::text()[last()] is .">
        <!-- last name in a list -->
        <xsl:copy/>
      </xsl:when>
      <xsl:when test="some $text in 
        (ancestor::tei:monogr|ancestor::tei:imprint|ancestor::tei:series|ancestor::tei:analytic)/*/
          descendant::text()[last()] 
        satisfies $text is .">
        <!-- last text node in any item of tei:imprint (all end in punctuation) -->
        <xsl:copy/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="."/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  
  <xsl:template match="jx:*" mode="bibl"/>
  
</xsl:stylesheet>