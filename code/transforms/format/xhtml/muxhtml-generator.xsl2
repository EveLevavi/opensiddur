<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet
  version="2.0" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:tei="http://www.tei-c.org/ns/1.0"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:func="http://jewishliturgy.org/ns/functions/xslt"
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns="http://www.w3.org/1999/xhtml"
  xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0"
  xmlns:jx="http://jewishliturgy.org/ns/jlp-processor"  
  xmlns:xd="http://www.pnp-software.com/XSLTdoc"
  xmlns:x="http://jewishliturgy.org/ns/temp"
  exclude-result-prefixes="#all"
>
  <xsl:namespace-alias stylesheet-prefix="x"
    result-prefix="xsl"/>
  <xsl:output method="xml" indent="yes"/>
  <xd:doc type="stylesheet">
    <xd:short>Default operation for transformation to micro-XHTML.</xd:short>
    <xd:copyright>Copyright 2009,2011 Efraim Feinstein</xd:copyright>
    <xd:detail>
        <p>This program is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.</p>

        <p>This program is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.</p>

        <p>You should have received a copy of the GNU Lesser General Public License
        along with this program.  If not, see <a href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>.</p>
      </xd:detail>
      <xd:svnId>$Id: muxhtml-generator.xsl2 766 2011-04-28 02:42:20Z efraim.feinstein $</xd:svnId>
  </xd:doc>
  
  <xd:doc>
    <xd:short>Holds the index containing jx:transform elements.
    Each jx:transform element has an @pattern attribute with an
    XSLT pattern, and a @class that is the name of the class that will
    result.  @element optionally defines an html element, otherwise
    it defaults to html:div. @apply-mode specifies what mode should be
    applied to the element, the default is #current</xd:short>
  </xd:doc>
  <xsl:variable name="class-index" as="element(jx:class-index)">
    <jx:class-index>
      <jx:transform pattern="tei:ab" class="ab"/>
      <jx:transform pattern="tei:ab[@type='verse']" class="ab-verse"/>
      <jx:transform pattern="tei:availability" class="availability"/>
      <jx:transform pattern="tei:biblStruct" class="bibl-entry"/>
      <jx:transform pattern="tei:back" class="text-back-matter"/>
      <jx:transform pattern="tei:body" class="text-body"/>
      <jx:transform pattern="tei:choice/j:read" class="read"/>
      <jx:transform pattern="tei:choice/j:written" class="written"/>
      <jx:transform pattern="tei:cit" class="cit"/>      
      <jx:transform pattern="tei:def" class="dict-definition"/>
      <jx:transform pattern="tei:div" class="div"/>
      <jx:transform pattern="tei:div[@type='x']" class="div-x"/>
      <jx:transform pattern="tei:docAuthor" class="doc-author"/>
      <jx:transform pattern="tei:docDate" class="doc-date"/>
      <jx:transform pattern="tei:docImprint" class="doc-imprint"/>
      <jx:transform pattern="tei:docTitle" class="doc-title"/>
      <jx:transform pattern="tei:docTitle" mode="document-title" element="title"/>
      <jx:transform pattern="tei:etym" class="dict-etymology"/>
      <jx:transform pattern="tei:forename" element="span" class="forename"/>
      <jx:transform pattern="tei:form" class="dict-form"/>
      <jx:transform pattern="tei:front" class="text-front-matter"/>
      <jx:transform pattern="tei:gloss" class="gloss"/>
      <jx:transform pattern="tei:gramGrp" class="dict-grammar-group"/>
      <jx:transform pattern="tei:head" class="head"/>
      <jx:transform pattern="tei:hi" class="emph"/>
      <jx:transform pattern="tei:item" class="item" priority="-1"/>
      <jx:transform pattern="tei:lang" class="dict-lang"/>
      <jx:transform pattern="tei:list" class="list" priority="-1"/>
      <jx:transform pattern="tei:lg" class="lg"/>
      <jx:transform pattern="tei:l" class="l"/>
      <jx:transform pattern="tei:name" class="name"/>
      <jx:transform pattern="tei:note[@type='instruct']" class="instruction"/>
      <jx:transform pattern="tei:orgName" class="orgname"/>
      <jx:transform pattern="tei:orth" class="dict-orth"/>
      <jx:transform pattern="tei:p" class="p"/>
      <jx:transform pattern="tei:pc" element="span" class="pc"/>
      <jx:transform pattern="tei:pc[.='פ']" element="span" class="pc pe"/>
      <jx:transform pattern="tei:pc[.='ס']" element="span" class="pc samekh"/>
      <jx:transform pattern="tei:pos" class="dict-part-of-speech"/>
      <jx:transform pattern="tei:pron" class="dict-pronunciation"/>
      <jx:transform pattern="tei:publisher" class="publisher"/>
      <jx:transform pattern="tei:quote" class="quote"/>
      <jx:transform pattern="tei:re" class="dict-related"/>
      <jx:transform pattern="tei:roleName" element="span" class="rolename"/>
      <jx:transform pattern="tei:s" class="s"/>
      <jx:transform pattern="tei:seg" class="seg"/>
      <jx:transform pattern="tei:surname" element="span" class="surname"/>
      <jx:transform pattern="tei:title" class="title" />
      <jx:transform pattern="tei:titlePage" class="title-page" />
      <jx:transform pattern="tei:titlePart[@type='main']" class="title-part-main"/>
      <jx:transform pattern="tei:titlePart[@type='sub']" class="title-part-sub"/>
      <jx:transform pattern="tei:w" element="span" class="w"/>
      <jx:transform pattern="j:divineName" element="span" class="divineName"/>
      <jx:transform pattern="j:original" class="original"/>
      <jx:transform pattern="j:parallel" class="parallel"/>
      <jx:transform pattern="j:parallelGrp" class="parallelGrp"/>
      <jx:skip pattern="tei:choice"/>
      <jx:skip pattern="tei:text"/>
      <jx:skip pattern="*" mode="document-title" priority="-10"/>
      <jx:erase pattern="text()" mode="document-title" priority="-10"/>
      <jx:erase pattern="tei:label[@n=('chapter','verse')]"/>
      <jx:copy pattern="text()[ancestor::tei:titlePart[@type='main']]" mode="document-title"/>
    </jx:class-index>
  </xsl:variable>
  
  <xd:doc>
    <xd:short>Generate a template for each pattern.</xd:short>
  </xd:doc>
  <xsl:template match="jx:transform">
    <x:template match="{@pattern}">
      <xsl:copy-of select="(@priority, @mode)"/>
      <x:sequence select="func:debug(., ('jx:transform ',name()), $debug-info)"/>
      <x:variable name="classes" as="xs:string">
        <x:sequence select="string-join(
          ('{@class}', 
          if (@next and not(@prev)) then 'first-part' 
          else if (@next and @prev) then 'middle-part' 
          else if (@prev and not(@next)) then 'last-part' else ()),' ')"/>
      </x:variable>
      <xsl:element name="{(@element, 'div')[1]}">
        <x:if test="$classes">
          <x:attribute name="class" select="$classes"/>
        </x:if>
        <x:call-template name="write-xml-lang"/>
        <x:apply-templates mode="{(@apply-mode, '#current')[1]}">
          <x:with-param name="unhandled-lang" as="xs:string?" tunnel="yes" select="()"/> 
        </x:apply-templates>
      </xsl:element>
    </x:template>
  </xsl:template>
  
  <xd:doc>
    <xd:short>Generate an exact copy with no transformation of self or descendants</xd:short>
  </xd:doc>
  <xsl:template match="jx:copy">
    <x:template match="{@pattern}">
      <xsl:copy-of select="(@mode, @priority)"/>
      <x:sequence select="."/>
    </x:template>
  </xsl:template>

  <xd:doc>
    <xd:short>Generate a template for a skip</xd:short>
  </xd:doc>
  <xsl:template name="generate-skip-transform">
    <xsl:apply-templates select="jx:skip"/>
  </xsl:template>
  
  <xsl:template match="jx:skip">
    <x:template match="{@pattern}">
      <xsl:copy-of select="(@priority, @mode)"/>
      <x:param name="unhandled-lang" tunnel="yes" as="xs:string?" select="@xml:lang"/>
      <x:apply-templates mode="{(@apply-mode, '#current')[1]}">
        <x:with-param name="unhandled-lang" tunnel="yes" as="xs:string?" select="(@xml:lang, $unhandled-lang)[1]"/>
      </x:apply-templates>
    </x:template>
  </xsl:template>

  <xd:doc>
    <xd:short>Generate a template for an erase</xd:short>
  </xd:doc>
  <xsl:template name="generate-erase-transform">
    <xsl:apply-templates select="jx:erase"/>
  </xsl:template>
 
  <xsl:template match="jx:erase">
    <x:template match="{@pattern}">
      <xsl:copy-of select="(@priority, @mode)"/>
    </x:template>
  </xsl:template>
 
  <xd:doc>
    <xd:short>Form a stylesheet</xd:short>
  </xd:doc>
  <xsl:template match="jx:class-index">
    <x:stylesheet version="2.0" exclude-result-prefixes="tei j xs func">
			<xsl:namespace name="" select="'http://www.w3.org/1999/xhtml'"/>
			<xsl:namespace name="tei" select="'http://www.tei-c.org/ns/1.0'"/>
			<xsl:namespace name="j" select="'http://jewishliturgy.org/ns/jlptei/1.0'"/>
      <xsl:namespace name="xs" select="'http://www.w3.org/2001/XMLSchema'"/>
      <xsl:namespace name="func" select="'http://jewishliturgy.org/ns/functions/xslt'"/>
      
      <x:import href="../../../common/common.xsl2"/>
      
      <x:output method="xml" version="1.0" encoding="UTF-8" 
        doctype-public="-//W3C//DTD XHTML 1.1//EN" 
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd" 
        indent="no"/>
      
      <!-- href to this document's style -->
      <x:param name="style" as="xs:string" select="'style.css'"/>
      
      <x:template name="write-xml-lang" as="attribute()*">
        <x:param name="unhandled-lang" tunnel="yes" as="xs:string?" select="@xml:lang"/>
        <x:variable name="new-lang" as="xs:string?" select="(@xml:lang, $unhandled-lang)[1]"/>
        
        <x:if test="$new-lang">
          <x:attribute name="xml:lang" select="$new-lang"/>
          <x:attribute name="lang" select="$new-lang"/>
        </x:if>
      </x:template>
            
      <x:template match="tei:TEI">
        <html>
          <x:call-template name="write-xml-lang"/>
          <head>
            <!-- add a title, will need to be changed w/multi-lingual 
            titles -->
            <x:apply-templates select="//tei:titlePage" mode="document-title"/>
            
            <!-- this is for stupid browsers that can't read
             xml declarations or doctypes -->
            <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
            <link rel="stylesheet" href="{{$style}}" type="text/css"/>
          </head>
          <body> 
            <x:apply-templates />
          </body>
        </html>
      </x:template>
      
      <xsl:apply-templates select="jx:transform|jx:skip|jx:copy|jx:erase"/>
    </x:stylesheet>
  </xsl:template>
  
  <xd:doc>
    <xd:short>Generate the class matchers using the $class-index
    variable.</xd:short>
  </xd:doc>
  <xsl:template name="main">
    <xsl:apply-templates select="$class-index"/>
  </xsl:template>
  
</xsl:stylesheet>
