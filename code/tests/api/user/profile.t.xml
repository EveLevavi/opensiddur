<?xml version="1.0" encoding="utf-8"?>
<TestSuite
  xmlns:tei="http://www.tei-c.org/ns/1.0"
  xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0"
  xmlns:jx="http://jewishliturgy.org/ns/jlp-processor"
  xmlns:http="http://expath.org/ns/http-client">
  <suiteName>User profile API</suiteName>
  <description>
    <p>Test user profile</p>
    <author>Efraim Feinstein</author>
  </description>
  <setup/>
  <namespace prefix="html">http://www.w3.org/1999/xhtml</namespace>
  <namespace prefix="tei">http://www.tei-c.org/ns/1.0</namespace>
  <namespace prefix="j">http://jewishliturgy.org/ns/jlptei/1.0</namespace>
  <namespace prefix="jx">http://jewishliturgy.org/ns/jlp-processor</namespace>
  <imports>
    import module namespace apitest="http://jewishliturgy.org/modules/apitest"
      at "xmldb:exist:///code/tests/api/apitest.xqm";
  </imports>
  <variable name="magicpassword"><![CDATA[apitest:magicpassword()]]></variable>
  <TestSet>
    <testName>HTTP GET, not logged in</testName>
    <setup/>
    <imports>
    </imports>
    <functions>
    </functions>
    <tearDown/>
    <test>
      <task>GET menu with existing user name</task>
      <code><![CDATA[
        apitest:get("/code/api/user/testuser", 
          <header name="Accept" value="application/xhtml+xml"/>)
      ]]></code>
      <xpath desc="returns status code 200">./@statusCode = 200</xpath> 
    </test>
    <test>
      <task>GET menu with non-existing user name</task>
      <code><![CDATA[
        apitest:get("/code/api/user/nonexistent", 
          <header name="Accept" value="application/xhtml+xml"/>)
      ]]></code>
      <xpath desc="returns status code 404">./@statusCode = 404</xpath> 
    </test>
    <test>
      <task>GET name with non-existing user name</task>
      <code><![CDATA[
        apitest:get("/code/api/user/nonexistent/name", 
          <header name="Accept" value="application/xhtml+xml"/>)
      ]]></code>
      <xpath desc="returns status code 404">./@statusCode = 404</xpath> 
    </test>
    <test>
      <task>GET name</task>
      <code><![CDATA[
        apitest:get("/code/api/user/testuser/name", 
          <header name="Accept" value="application/xhtml+xml"/>)
      ]]></code>
      <xpath desc="returns status code 401">./@statusCode = 401</xpath> 
    </test>
    <test>
      <task>GET organization name</task>
      <code><![CDATA[
        apitest:get("/code/api/user/testuser/orgname", 
          <header name="Accept" value="application/xhtml+xml"/>)
      ]]></code>
      <xpath desc="returns status code 401">./@statusCode = 401</xpath> 
    </test>
    <test>
      <task>GET email</task>
      <code><![CDATA[
        apitest:get("/code/api/user/testuser/email", 
          <header name="Accept" value="application/xhtml+xml"/>)
      ]]></code>
      <xpath desc="returns status code 401">./@statusCode = 401</xpath> 
    </test>
  </TestSet>
  <TestSet>
    <testName>HTTP GET while logged in</testName>
    <asUser>testuser</asUser>
    <password>testuser</password>
    <setup>
      <store collection="/group/testuser" name="profile.xml">
        <tei:div xml:id="testuser" type="contributor">
          <tei:name>
            <tei:forename>Test</tei:forename>
            <tei:surname>User</tei:surname>
          </tei:name>
          <tei:email>test@test.com</tei:email>
          <tei:orgName>Organization</tei:orgName>
        </tei:div>
      </store>
      <code><![CDATA[
        apitest:put("/code/api/user/login/testuser", 
          <header name="Accept" value="text/plain"/>, "testuser")
      ]]></code></setup>
    <imports>
    </imports>
    <functions>
    </functions>
    <tearDown>
    <remove-document collection="/group/testuser" name="profile.xml"/>
    <code><![CDATA[ 
    apitest:clear()
    ]]></code>
    </tearDown>
    <test>
      <task>GET menu with existing user name</task>
      <code><![CDATA[
        apitest:get("/code/api/user/testuser", 
          <header name="Accept" value="application/xhtml+xml"/>)
      ]]></code>
      <xpath desc="Services are listed">count(.//html:ul[@class="common"]/html:li[html:a/@class="service"]) &gt; 0</xpath>
      <class href="../common.t.xml#SelfConsistentMenu"/>
      <class href="../common.t.xml#Testing"/> 
    </test>
    <test>
      <task>GET menu with non-existing user name</task>
      <code><![CDATA[
        apitest:get("/code/api/user/nonexistent", 
          <header name="Accept" value="application/xhtml+xml"/>)
      ]]></code>
      <xpath desc="returns status code 404">./@statusCode = 404</xpath> 
    </test>
    <test>
      <task>GET menu with existing user name but not the same as the one that is logged in</task>
      <code><![CDATA[
        apitest:get("/code/api/user/admin", 
          <header name="Accept" value="application/xhtml+xml"/>)
      ]]></code>
      <xpath desc="returns status code 403">./@statusCode = 403</xpath> 
    </test>
    <test>
      <task>GET name as HTML</task>
      <code><![CDATA[
        apitest:get("/code/api/user/testuser/name", 
          <header name="Accept" value="application/xhtml+xml"/>)
      ]]></code>
      <xpath desc="The name is returned as a common result">count(.//html:ul[@class="common"]/html:li)=1</xpath>
      <class href="../common.t.xml#SelfConsistentMenu"/>
      <class href="../common.t.xml#Testing"/>
    </test>
    <test>
      <task>GET name as text</task>
      <code><![CDATA[
        apitest:get("/code/api/user/testuser/name", 
          <header name="Accept" value="text/plain"/>)
      ]]></code>
      <xpath desc="The name is returned as a string">.//httpclient:body="Test+User"</xpath>
      <xpath desc="Data is returned as text">.//httpclient:body/@type="text"</xpath>
    </test>
    <test>
      <task>GET name as XML</task>
      <code><![CDATA[
        apitest:get("/code/api/user/testuser/name", 
          <header name="Accept" value="application/xml"/>)
      ]]></code>
      <xpath desc="The name is returned as a tei:name">exists(.//httpclient:body/tei:name)</xpath>
    </test>
    <test>
      <task>GET organization name as HTML</task>
      <code><![CDATA[
        apitest:get("/code/api/user/testuser/orgname", 
          <header name="Accept" value="application/xhtml+xml"/>)
      ]]></code>
      <xpath desc="The organization name is returned as a common result">count(.//html:ul[@class="common"]/html:li)=1</xpath>
      <class href="../common.t.xml#SelfConsistentMenu"/>
      <class href="../common.t.xml#Testing"/>
    </test>
    <test>
      <task>GET organization name as text</task>
      <code><![CDATA[
        apitest:get("/code/api/user/testuser/orgname", 
          <header name="Accept" value="text/plain"/>)
      ]]></code>
      <xpath desc="The name is returned as a string">.//httpclient:body="Organization"</xpath>
      <xpath desc="Data is returned as text">.//httpclient:body/@type="text"</xpath>
    </test>    
    <test>
      <task>GET organization name as XML</task>
      <code><![CDATA[
        apitest:get("/code/api/user/testuser/orgname", 
          <header name="Accept" value="application/xml"/>)
      ]]></code>
      <xpath desc="The name is returned as a tei:orgName">exists(.//httpclient:body/tei:orgName)</xpath>
    </test>    
    <test>
      <task>GET organization name as HTML</task>
      <code><![CDATA[
        apitest:get("/code/api/user/testuser/email", 
          <header name="Accept" value="application/xhtml+xml"/>)
      ]]></code>
      <xpath desc="The email is returned as a common result">count(.//html:ul[@class="common"]/html:li)=1</xpath>
      <class href="../common.t.xml#SelfConsistentMenu"/>
      <class href="../common.t.xml#Testing"/>
    </test>
    <test>
      <task>GET email as text</task>
      <code><![CDATA[
        apitest:get("/code/api/user/testuser/email", 
          <header name="Accept" value="text/plain"/>)
      ]]></code>
      <xpath desc="The name is returned as a string">.//httpclient:body=encode-for-uri("test@test.com")</xpath>
      <xpath desc="Data is returned as text">.//httpclient:body/@type="text"</xpath>
    </test>    
    <test>
      <task>GET email as XML</task>
      <code><![CDATA[
        apitest:get("/code/api/user/testuser/email", 
          <header name="Accept" value="application/xml"/>)
      ]]></code>
      <xpath desc="The email is returned as a tei:email">exists(.//httpclient:body/tei:email)</xpath>
    </test>    
  </TestSet>
  <TestSet>
    <testName>HTTP PUT while not logged in</testName>
    <setup/>
    <imports>
    </imports>
    <functions>
    </functions>
    <tearDown/>
    <test>
      <task>Attempt to change a user's password</task>
      <code><![CDATA[
        apitest:put("/code/api/user/testuser", (), <password>willnothappen</password>)
      ]]></code>
      <xpath desc="return status code 401">./@statusCode = 401</xpath> 
    </test>
    <test>
      <task>Attempt to change a user's name</task>
      <code><![CDATA[
        apitest:put("/code/api/user/testuser/name", 
          (), "New Name")
      ]]></code>
      <xpath desc="return status code 401">./@statusCode = 401</xpath> 
    </test>
    <test>
      <task>Attempt to change a user's organization name</task>
      <code><![CDATA[
        apitest:put("/code/api/user/testuser/orgname", 
          (), "New Organization")
      ]]></code>
      <xpath desc="return status code 401">./@statusCode = 401</xpath> 
    </test>
    <test>
      <task>Attempt to change a user's email</task>
      <code><![CDATA[
        apitest:put("/code/api/user/testuser/email", 
          (), "New@new.com")
      ]]></code>
      <xpath desc="return status code 401">./@statusCode = 401</xpath> 
    </test>
  </TestSet>
  <TestSet>
    <testName>HTTP PUT while logged in</testName>
    <asUser>testuser</asUser>
    <password>testuser</password>
    <setup>
      <store collection="/group/testuser" name="profile.xml">
        <tei:div xml:id="testuser" type="contributor">
          <tei:name>
            <tei:forename>Test</tei:forename>
            <tei:surname>User</tei:surname>
          </tei:name>
          <tei:email>test@test.com</tei:email>
          <tei:orgName>Organization</tei:orgName>
        </tei:div>
      </store>
      <code><![CDATA[
        apitest:put("/code/api/user/login/testuser", 
          <header name="Accept" value="text/plain"/>, "testuser")
      ]]></code></setup>
    <imports>
      import module namespace name="http://jewishliturgy.org/modules/name"
        at "xmldb:exist:///code/modules/name.xqm";
    </imports>
    <functions>
    </functions>
    <tearDown>
    <remove-document collection="/group/testuser" name="profile.xml"/>
    <code><![CDATA[ 
    xmldb:change-user("testuser", "testuser", (), ()),
    apitest:clear()
    ]]></code>
    </tearDown>
    <test>
      <task>Attempt to change the user's password using text</task>
      <code><![CDATA[
        apitest:put("/code/api/user/testuser", (), "newpasswordtext")
      ]]></code>
      <xpath desc="return status code 200">./@statusCode = 200</xpath>
      <xpath desc="testuser's password has been changed">xmldb:authenticate("/group/testuser", "testuser", "newpasswordtext")</xpath> 
    </test>
    <test>
      <task>Attempt to change the user's password using XML</task>
      <code><![CDATA[
        apitest:put("/code/api/user/testuser", (), <password>newpassword</password>)
      ]]></code>
      <xpath desc="return status code 200">./@statusCode = 200</xpath>
      <xpath desc="testuser's password has been changed">xmldb:authenticate("/group/testuser", "testuser", "newpassword")</xpath> 
    </test>
    <test>
      <task>Attempt to change the user's name using text content</task>
      <code><![CDATA[
        apitest:put("/code/api/user/testuser/name", 
          (), "New Name")
      ]]></code>
      <xpath desc="return status code 204">./@statusCode = 204</xpath>
      <xpath desc="the name has been changed">name:name-to-string(doc("/group/testuser/profile.xml")//tei:name)="New Name"</xpath> 
      <xpath desc="the name is split into forename and surname">count(doc("/group/testuser/profile.xml")//tei:name/(tei:forename, tei:surname))=2</xpath>
    </test>
    <test>
      <task>Attempt to change the user's name using XML content</task>
      <code><![CDATA[
        apitest:put("/code/api/user/testuser/name", 
          (), <tei:name>Newer Name</tei:name>)
      ]]></code>
      <xpath desc="return status code 204">./@statusCode = 204</xpath>
      <xpath desc="the name has been changed">name:name-to-string(doc("/group/testuser/profile.xml")//tei:name)="Newer Name"</xpath> 
      <xpath desc="the name is split into forename and surname">count(doc("/group/testuser/profile.xml")//tei:name/(tei:forename, tei:surname))=2</xpath>
    </test>
    <test>
      <task>Attempt to change the user's organization name using text content</task>
      <code><![CDATA[
        apitest:put("/code/api/user/testuser/orgname", 
          (), "New Organization")
      ]]></code>
      <xpath desc="return status code 204">./@statusCode = 204</xpath>
      <xpath desc="the organization name has been changed">doc("/group/testuser/profile.xml")//tei:orgName="New Organization"</xpath>
    </test>
    <test>
      <task>Attempt to change the user's organization name using XML content</task>
      <code><![CDATA[
        apitest:put("/code/api/user/testuser/orgname", 
          (), <tei:orgName>New Organization</tei:orgName>)
      ]]></code>
      <xpath desc="return status code 204">./@statusCode = 204</xpath>
      <xpath desc="the organization name has been changed">doc("/group/testuser/profile.xml")//tei:orgName="New Organization"</xpath>
    </test>
    <test>
      <task>Attempt to change the user's email using text</task>
      <code><![CDATA[
        apitest:put("/code/api/user/testuser/email", 
          (), "new@new.com")
      ]]></code>
      <xpath desc="return status code 204">./@statusCode = 204</xpath>
      <xpath desc="the email has been changed">doc("/group/testuser/profile.xml")//tei:email="new@new.com"</xpath> 
    </test>
    <test>
      <task>Attempt to change the user's email using XML</task>
      <code><![CDATA[
        apitest:put("/code/api/user/testuser/email", 
          (), <tei:email>new@new.com</tei:email>)
      ]]></code>
      <xpath desc="return status code 204">./@statusCode = 204</xpath>
      <xpath desc="the email has been changed">doc("/group/testuser/profile.xml")//tei:email="new@new.com"</xpath> 
    </test>
    <test>
      <task>Attempt to change the user's nonexistent property using text</task>
      <code><![CDATA[
        apitest:put("/code/api/user/testuser/nonexistent", 
          (), "shouldntwork")
      ]]></code>
      <xpath desc="return status code 404">./@statusCode = 404</xpath>
    </test>
  </TestSet>
  <TestSet>
    <testName>HTTP PUT to create a new user: will only run if the magicpassword request parameter is set</testName>
    <if>apitest:if-magicpassword()</if>
    <setup/>
    <imports>
    </imports>
    <functions>
    </functions>
    <tearDown>
      <code><![CDATA[
        system:as-user("admin", $magicpassword, 
            (
              xmldb:remove("/group/testuser2"),
              xmldb:delete-user("testuser2"),
              sm:delete-group("testuser2")
            )
          )
      ]]></code>
    </tearDown>
    <test>
      <task>Attempt to create a new user sending XML</task>
      <code><![CDATA[
        apitest:put("/code/api/user/testuser2", (), <password>newpassword</password>)
      ]]></code>
      <xpath desc="return status code 201">./@statusCode = 201</xpath> 
    </test>
    <test>
      <task>Attempt to create a new user sending text</task>
      <code><![CDATA[
        apitest:put("/code/api/user/testuser2", (), "newpassword")
      ]]></code>
      <xpath desc="return status code 201">./@statusCode = 201</xpath> 
    </test>
  </TestSet>
  <TestSet>
    <testName>HTTP POST to menu, not logged in</testName>
    <setup/>
    <imports>
    </imports>
    <functions>
    </functions>
    <tearDown/>
    <test>
      <task>PUT</task>
      <code><![CDATA[
        apitest:post("/code/api/user/testuser", (), <x/>)
      ]]></code>
      <class href="../common.t.xml#InvalidMethod"/>
    </test>
  </TestSet>
  <TestSet>
    <testName>HTTP DELETE menu, not logged in</testName>
    <setup/>
    <imports>
    </imports>
    <functions>
    </functions>
    <tearDown/>
    <test>
      <task>DELETE</task>
      <code><![CDATA[
        apitest:delete("/code/api/user/testuser", ())
      ]]></code>
      <class href="../common.t.xml#InvalidMethod"/> 
    </test>
  </TestSet>
</TestSuite>