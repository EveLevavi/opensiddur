<?xml version="1.0" encoding="UTF-8"?>
<!-- Note: must be run as admin! -->
<TestSuite
  xmlns:tei="http://www.tei-c.org/ns/1.0"
  xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0"
  xmlns:jx="http://jewishliturgy.org/ns/jlp-processor"
  xmlns:mirror="http://jewishliturgy.org/modules/mirror"
  >
  <suiteName>Mirror module</suiteName>
  <description>
    <p>Test the mirror collection module</p>
    <author>Efraim Feinstein</author>
  </description>
  <asUser>testuser</asUser>
  <password>testuser</password>
  <setup>
    <!-- set up a mirror -->
    <create-collection parent="/db/data/tests" name="mirror"/>
    <store collection="/db/data/tests/mirror" name="mirror-conf.xml">
      <mirror:configuration>
        <mirror:of>/db/data/tests</mirror:of>
      </mirror:configuration>
    </store>
  </setup>
  <tearDown>
    <remove-collection collection="/db/data/tests/mirror"/>
  </tearDown>
  <imports>
    import module namespace mirror="http://jewishliturgy.org/modules/mirror"
      at "xmldb:exist:///db/code/modules/mirror.xqm";
  </imports>
  <variable name="original-collection">'/db/data/tests'</variable>
  <variable name="mirror-collection">'/db/data/tests/mirror'</variable>
  <functions><![CDATA[
    declare function local:same-permissions(
      $a as xs:string,
      $b as xs:string
      ) as xs:boolean {
        (xmldb:collection-available($a) or doc-available($a)) and
        (xmldb:collection-available($b) or doc-available($b)) and
        xmldiff:compare(sm:get-permissions(xs:anyURI($a)),sm:get-permissions(xs:anyURI($b)))
      };
  ]]></functions>
  <TestSet>
    <testName>mirror:create()</testName>
    <tearDown>
      <remove-collection collection="/db/data/tests/new-mirror"/>
    </tearDown>
    <test output="text">
      <task>Create a new mirror collection</task>
      <code><![CDATA[
      mirror:create("/db/data/tests/new-mirror",$original-collection)
      ]]></code>
      <xpath desc="mirror collection created">xmldb:collection-available("/db/data/tests/new-mirror")</xpath>
      <xpath desc="mirror configuration exists">doc-available("/db/data/tests/new-mirror/" || $mirror:configuration)</xpath>
      <xpath desc="mirror configuration is correct">doc('/db/data/tests/new-mirror/' || $mirror:configuration)/mirror:configuration/mirror:of = "/db/data/tests"</xpath>
      <xpath desc="mirror collection permissions are the same as the original collection">local:same-permissions("/db/data/tests/new-mirror", $original-collection)</xpath>
    </test>
  </TestSet>
  <TestSet>
    <testName>mirror:mirror-path()</testName>
    <test output="text">
      <task>Returns the path concatenated</task>
      <code><![CDATA[
        mirror:mirror-path("/db/data/tests/mirror", "/db/data/tests/original/path")
      ]]></code>
      <expected>/db/data/tests/mirror/original/path</expected> 
    </test>
    <test output="text">
      <task>Handles relative paths in second parameter</task>
      <code><![CDATA[
        mirror:mirror-path("/db/data/tests/mirror", "original/path")
      ]]></code>
      <expected>/db/data/tests/mirror/original/path</expected>
    </test>
    <test output="text">
      <task>No /db prefix in second parameter</task>
      <code><![CDATA[
        mirror:mirror-path("/db/data/tests/mirror", "/data/tests")
      ]]></code>
      <error desc="returns error:NOT_MIRRORED" code="error:NOT_MIRRORED"/>
    </test>
    <test output="text">
      <task>No /db in first parameter</task>
      <code><![CDATA[
        mirror:mirror-path("/data/tests/mirror", "/db/data/tests")
      ]]></code>
      <error desc="returns error:INPUT" code="error:INPUT"/>
    </test>
    <test output="text">
      <task>If mirror collection is not a mirror</task>
      <code><![CDATA[
        mirror:mirror-path("/db", "/original/path")
      ]]></code>
      <error desc="reports error:NOT_A_MIRROR" code="error:NOT_A_MIRROR"/>
    </test>
    <test output="text">
      <task>If mirrored collection is not in the mirror</task>
      <code><![CDATA[
        mirror:mirror-path("/db/data/tests/mirror", "/db")
      ]]></code>
      <error desc="reports error:NOT_MIRRORED" code="error:NOT_MIRRORED"/>
    </test>
  </TestSet>
  <TestSet>
    <testName>mirror:unmirror-path()</testName>
    <test output="text">
      <task>/db in both parameters, self</task>
      <code><![CDATA[
        mirror:unmirror-path("/db/data/tests/mirror", "/db/data/tests/mirror")
      ]]></code>
      <expected>/db/data/tests</expected> 
    </test>
    <test output="text">
      <task>/db in first parameter</task>
      <code><![CDATA[
        mirror:unmirror-path("/db/data/tests/mirror", "/data/tests/mirror")
      ]]></code>
      <error desc="reports error:INPUT" code="error:INPUT"/>      
    </test>
    <test output="text">
      <task>/db in second parameter</task>
      <code><![CDATA[
        mirror:unmirror-path("/data/tests/mirror", "/db/data/tests/mirror")
      ]]></code>
      <error desc="reports error:INPUT" code="error:INPUT"/>      
    </test>
    <test output="text">
      <task>mirror with further collections</task>
      <code><![CDATA[
        mirror:unmirror-path("/db/data/tests/mirror", "/db/data/tests/mirror/one/two")
      ]]></code>
      <expected>/db/data/tests/one/two</expected> 
    </test>
  </TestSet>
  <TestSet>
    <testName>mirror:make-collection-path()</testName>
    <setup>
      <create-collection parent="/db/data/tests" name="one"/>
      <create-collection parent="/db/data/tests/one" name="two"/>
      <create-collection parent="/db/data/tests/one/two" name="three"/>
      <create-collection parent="/db/data/tests/one/two/three" name="four"/>
      <code><![CDATA[
        let $one := xs:anyURI("/db/data/tests/one")
        let $two := xs:anyURI("/db/data/tests/one/two")
        let $three := xs:anyURI("/db/data/tests/one/two/three")
        let $four := xs:anyURI("/db/data/tests/one/two/three/four")
        return (
          sm:chown($one, "testuser"),
          sm:chgrp($one, "everyone"),
          sm:chmod($one, "rwxrwxr-x"),
          sm:add-user-ace($two, "testuser2", true(), "w"),
          sm:add-group-ace($three, "everyone", true(), "r"),
          sm:add-user-ace($four, "testuser2", true(), "r"),
          sm:add-group-ace($four, "everyone", false(), "w")
        )
      ]]></code>
    </setup>
    <tearDown>
      <remove-collection collection="/db/data/tests/one"/>
    </tearDown>
    <test>
      <task>Make a collection hierarchy</task>
      <code><![CDATA[
        mirror:make-collection-path("/db/data/tests/mirror","/db/data/tests/one/two/three/four")
      ]]></code>
      <xpath desc="mirror collection 'one' created">xmldb:collection-available("/db/data/tests/mirror/one")</xpath>
      <xpath desc="mirror collection 'two' created">xmldb:collection-available("/db/data/tests/mirror/one/two")</xpath>
      <xpath desc="mirror collection 'three' created">xmldb:collection-available("/db/data/tests/mirror/one/two/three")</xpath>
      <xpath desc="mirror collection 'four' created">xmldb:collection-available("/db/data/tests/mirror/one/two/three/four")</xpath>
      <xpath desc="mirror collection 'one' has same permissions as /db/data/tests/one (changed owner/group/mode)">local:same-permissions("/db/data/tests/mirror/one","/db/data/tests/one")</xpath>
      <xpath desc="mirror collection 'two' has same permissions as /db/data/tests/one/two (allowed user ACE)">local:same-permissions("/db/data/tests/mirror/one/two","/db/data/tests/one/two")</xpath>
      <xpath desc="mirror collection 'three' has same permissions as /db/data/tests/one/two/three (allowed group ACE)">local:same-permissions("/db/data/tests/mirror/one/two/three","/db/data/tests/one/two/three")</xpath>
      <xpath desc="mirror collection 'four' has same permissions as /db/data/tests/one/two/three/four (allowed user ACE, disallowed group ACE)">local:same-permissions("/db/data/tests/mirror/one/two/three/four","/db/data/tests/one/two/three/four")</xpath>
    </test>
  </TestSet>
  <TestSet>
    <testName>mirror:is-up-to-date() where resource is newer</testName>
    <setup>
      <store collection="/db/data/tests" name="test.xml">
        <test/>
      </store>
      <store collection="/db/data/tests/mirror" name="test.xml">
        <mirror/>
      </store>
    </setup>
    <tearDown>
      <remove-document collection="/db/data/tests" name="test.xml"/>
    </tearDown>
    <test output="text">
      <task>with no function</task>
      <code output="text"><![CDATA[
        mirror:is-up-to-date($mirror-collection, "/db/data/tests/test.xml")
      ]]></code>
      <expected desc="returns true">true</expected>
    </test>
    <test output="text">
      <task>with an additional function that returns true()</task>
      <code output="text"><![CDATA[
        mirror:is-up-to-date($mirror-collection, "/db/data/tests/test.xml", 
          function($m, $t) as xs:boolean { true() })
      ]]></code>
      <expected desc="returns true">true</expected>
    </test>
    <test output="text">
      <task>with an additional function that returns false()</task>
      <code output="text"><![CDATA[
        mirror:is-up-to-date($mirror-collection, "/db/data/tests/test.xml", 
          function($m, $t) as xs:boolean { false() })
      ]]></code>
      <expected desc="returns false">false</expected>
    </test>
  </TestSet>
  <TestSet>
    <testName>mirror:is-up-to-date() where resource is older</testName>
    <setup>
      <store collection="/db/data/tests/mirror" name="test.xml">
        <mirror/>
      </store>
      <store collection="/db/data/tests" name="test.xml">
        <test/>
      </store>
    </setup>
    <tearDown>
      <remove-document collection="/db/data/tests" name="test.xml"/>
    </tearDown>
    <test output="text">
      <task>without an additional function</task>
      <code output="text"><![CDATA[
        mirror:is-up-to-date($mirror-collection, "/db/data/tests/test.xml")
      ]]></code>
      <expected desc="returns false">false</expected>
    </test>
    <test output="text">
      <task>with an additional function that returns true()</task>
      <code output="text"><![CDATA[
        mirror:is-up-to-date($mirror-collection, "/db/data/tests/test.xml", 
          function($m, $t) as xs:boolean { true() })
      ]]></code>
      <expected desc="returns false">false</expected>
    </test>
  </TestSet>
  <TestSet>
    <testName>mirror:store()</testName>
    <setup>
      <create-collection parent="/db/data/tests" name="one"/>
      <store collection="/db/data/tests/one" name="test.xml">
        <test/>
      </store>
    </setup>
    <tearDown>
      <remove-collection collection="/db/data/tests/one" />
    </tearDown>
    <test output="text">
      <task>Store a resource</task>
      <code><![CDATA[
        mirror:store($mirror-collection, "/db/data/tests/one", "test.xml", <mirror/>)
      ]]></code>
      <expected desc="returns path of mirror document">/db/data/tests/mirror/one/test.xml</expected>
      <xpath desc="mirror collection created">xmldb:collection-available("/db/data/tests/mirror/one")</xpath>
      <xpath desc="mirror resource created">doc-available("/db/data/tests/mirror/one/test.xml")</xpath>
      <xpath desc="mirror resource has same permissions as original">local:same-permissions("/db/data/tests/one/test.xml", "/db/data/tests/mirror/one/test.xml")</xpath>
    </test>
  </TestSet>
  <TestSet>
    <testName>mirror:remove()</testName>
    <setup>
      <create-collection parent="/db/data/tests/mirror" name="one"/>
      <store collection="/db/data/tests/mirror/one" name="test.xml">
        <test/>
      </store>
    </setup>
    <test output="text">
      <task>Remove a resource</task>
      <code><![CDATA[
        mirror:remove($mirror-collection, "/db/data/tests/one", "test.xml")
      ]]></code>
      <xpath desc="resource removed">not(doc-available("/db/data/tests/mirror/one/test.xml"))</xpath>
    </test>
    <test output="text">
      <task>Remove a collection</task>
      <code><![CDATA[
        mirror:remove($mirror-collection, "/db/data/tests/one")
      ]]></code>
      <xpath desc="collection removed">not(xmldb:collection-available("/db/data/tests/mirror/one"))</xpath>
    </test>
  </TestSet>
  <TestSet>
    <testName>mirror:apply-if-outdated()</testName>
    <setup>
      <store collection="/db/data/tests" name="test-up-to-date.xml">
        <up-to-date/>
      </store>
      <store collection="/db/data/tests" name="test-out-of-date.xml">
        <up-to-date n="1"/>
      </store>
      <store collection="/db/data/tests/mirror" name="test-up-to-date.xml">
        <up-to-date n="1"/>
      </store>
    </setup>
    <functions>
      declare function local:transform(
        $context as node()
      ) as node()* {
        typeswitch($context)
        case document-node() return document { local:transform($context/*)}
        case element(up-to-date) return element up-to-date { attribute n { $context/@n/number() + 1 }}
        default return $context
      };
    </functions>
    <tearDown>
      <remove-document collection="/db/data/tests" name="test-up-to-date.xml"/>
      <remove-document collection="/db/data/tests" name="test-out-of-date.xml"/>
    </tearDown>
    <test>
      <task>is up to date</task>
      <code><![CDATA[
      mirror:apply-if-outdated(
        $mirror-collection, 
        "/db/data/tests/test-up-to-date.xml",
        local:transform#1)
      ]]></code>
      <xpath desc="transform did not run">doc("/db/data/tests/mirror/test-up-to-date.xml")/up-to-date/@n = 1</xpath>
      <xpath desc="return value is correct document">./up-to-date/@n = 1</xpath>
    </test>
    <test>
      <task>is out of date</task>
      <code><![CDATA[
      mirror:apply-if-outdated(
        $mirror-collection, 
        "/db/data/tests/test-out-of-date.xml",
        local:transform#1)
      ]]></code>
      <xpath desc="transform did run">doc("/db/data/tests/mirror/test-out-of-date.xml")/up-to-date/@n = 2</xpath>
      <xpath desc="return value is transformed document">./up-to-date/@n = 2</xpath>
    </test>
  </TestSet>
</TestSuite>
