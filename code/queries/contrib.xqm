xquery version "1.0";
(:
: Module Name: Contributor List API
: Module Version: $Id: contrib.xqm 258 2009-09-02 01:46:07Z efraim.feinstein $
: Date: August 10, 2009
: Copyright: 2009 Efraim Feinstein <efraim.feinstein@gmail.com>. LGPL 3+
: Proprietary XQuery Extensions Used: 
: XQuery Specification: January 2007
: Module Overview: Provides an API to a contributor list.  
:   Requires that the context be set to a valid contributor list.
:   Functions return 
:   <report><status>valid|invalid|ok|error</status> explanation...</report>
:)
(:~
 : @author Efraim Feinstein
 :)
module namespace 
    contrib="http://jewishliturgy.org/ns/functions/contrib";

import module namespace 
  jvalidate="http://jewishliturgy.org/ns/functions/nonportable/validation"; 
import module namespace 
  jupdate="http://jewishliturgy.org/ns/functions/nonportable/update"; 

declare namespace tei="http://www.tei-c.org/ns/1.0"; 

declare variable $contrib:contributor-list := 
  //tei:TEI/tei:text/tei:body/tei:div[@type='contributors']/tei:list;

declare variable $contrib:SCHEMATRON := 
  '/queries/contrib.sch' cast as xs:anyURI; 

(:~ @return whether the context has a contributor list, 
 : making no statement about its validity.
 :)
declare function contrib:is-a() as xs:boolean {
  boolean($contrib:contributor-list)
};

(:~ @return whether the context is a contributor list :)
declare function contrib:is-valid-file() as xs:boolean {
    jvalidate:validation-boolean(
      jvalidate:validate-iso-schematron-svrl(root(), $contrib:SCHEMATRON))
};

(:~ @return why the context is an (in)valid contributor list :)
declare function contrib:why-invalid-file() 
  as element(report) {
  jvalidate:validate-iso-schematron-svrl(root(), $contrib:SCHEMATRON)
}; 

(:~
 : @param $content The complete tei:item, including @xml:id
 : @param $toadd If true, specifies that the content is to be
 :    added.  If false, that it is to be replaced. 
 : @return whether a given tei:item can be added or edited in 
 : this contributor list 
 :)
declare function contrib:is-valid-item($content as element(tei:item),
  $toadd as xs:boolean) 
  as xs:boolean {
  (: check for duplicate xml:id or duplicate OpenID :)
  if ($toadd and (
  $contrib:contributor-list/id($content/@xml:id) or
  $contrib:contributor-list/tei:item/tei:ptr[@type='openid']/@target 
    eq $content/tei:ptr[@type='openid']/@target))
  then false()
  else
    jvalidate:validation-boolean(
      jvalidate:validate-iso-schematron-svrl($content, $contrib:SCHEMATRON)) 
};

(:~ @return a report indicating why a contributor list item is (in)valid :)
declare function contrib:why-invalid-item($content as element(tei:item))
  as element(report) {
  jvalidate:validate-iso-schematron-svrl($content, $contrib:SCHEMATRON)
};

(:~ @return a file-unique xml:id based on $content :)
declare function contrib:generate-xmlid($content as element(tei:item)) 
  as xs:string {
  let $nameBase := lower-case(
    string-join(($content/tei:forename, $content/tei:surname, $content/tei:genName),'.'))
  let $idRegex := string-join(('^', $nameBase, '(\.[0-9]+)?'), '')
  let $allIds := 
    for $xmlid in $contrib:contributor-list/tei:item/@xml:id[matches(., 
      $idRegex)] return string($xmlid)
  let $allIdSuffixes := 
    if (count($allIds) eq 0) 
    then ()
    else
        for $suffix in replace($allIds, $idRegex, '$1')
        return
            if (string-length($suffix) eq 0) then 0
            else xs:integer($suffix)
  return
    if (count($allIdSuffixes) > 0) 
    then string-join(($nameBase, string(max($allIdSuffixes) + 1)), '.')
    else $nameBase
    
};

(:~ add $content to the contributor list
 : if $content doesn't have an @xml:id, it is autogenerated and added. 
 : @param $content the item to be added 
 : @return report/status/"ok" or report
 :)
declare function contrib:add($content as element(tei:item)) as element() {
  let $content :=
    if (string-length($content/@xml:id)=0)
    then (
        <tei:item 
            xml:id="{contrib:generate-xmlid($content)}"> 
            {$content/@*}
            {$content/*}
        </tei:item>
    )
    else $content
  return
    let $validation := contrib:why-invalid-file()
    return 
      if (not($validation)) 
      then $validation
      else
      if (contrib:is-valid-item($content, true()))
      then
        <report>
            <status>ok</status>
            {jupdate:insert($content, 'into', $contrib:contributor-list)}
        </report>
      else
        contrib:why-invalid-item($content) 
};

(:~ edit an existing entry in the contributor list
 : @param $content the new content, where @xml:id identifies
 :  which element is being edited
 : @return report with ok status or error
 :)
declare function contrib:edit($content)
    as element() {
    let $contentToEdit :=
        contrib:get-by-id($content/@xml:id) |
        contrib:get-by-openid($content/tei:ptr[@type='openid']/@target)
    let $numberOfContents := count($contentToEdit)
    return
        if ($numberOfContents eq 0)
        then
            (: this is an add operation :)
            contrib:add($content)
        else
            (: this is an edit operation :)
            if (contrib:is-valid-item($content, false()))
            then
                <report>
                  <status>ok</status>
                    {jupdate:replace($contentToEdit, $content)}
                </report>
            else
                contrib:why-invalid-item($content)
};

(:~ remove a contributor.  
 : TODO: check if the contributor has contributed anything.
 : If so, he/she can't be removed.
 :)
declare function contrib:remove($xmlid as xs:string) 
    as element()  {
  <report>
    <status>ok</status>
    {jupdate:delete($contrib:contributor-list/tei:item[@xml:id eq $xmlid])}
  </report>
};

(:~ get a contributor's information by xml:id
 : @param $xmlid the xml:id
 : @return the item, or empty
 :)
declare function contrib:get-by-id($xmlid as xs:string)
    as element(tei:item)? {
  $contrib:contributor-list/tei:item[@xml:id eq $xmlid]  
};

(:~ get a contributor's information by an OpenID, 
 : which is referenced by tei:ptr[@type=openid]/@target
 :)
declare function contrib:get-by-openid($openid as xs:string)
    as element(tei:item)? {
   $contrib:contributor-list/tei:item[tei:ptr[@type='openid']/@target eq $openid] 
};

(:~ get a contributor's information by string information
 : (eg, name or email)
 : @param $regex is a regular expression defining the search term
 : @return the tei:item(s) that match
 :)
declare function contrib:get-by-string($regex as xs:string)
    as element(tei:item)* {
    $contrib:contributor-list/tei:item[matches(.,$regex)]
};

(:~ @return all items :)
declare function contrib:get-all() 
    as element(tei:item)* {
    $contrib:contributor-list/tei:item   
};